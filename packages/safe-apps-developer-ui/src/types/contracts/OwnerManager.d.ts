/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OwnerManagerInterface extends ethers.utils.Interface {
  functions: {
    "addOwnerWithThreshold(address,uint256)": FunctionFragment;
    "removeOwner(address,address,uint256)": FunctionFragment;
    "swapOwner(address,address,address)": FunctionFragment;
    "changeThreshold(uint256)": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "getOwners()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOwnerWithThreshold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOwner",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addOwnerWithThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;

  events: {
    "AddedOwner(address)": EventFragment;
    "ChangedThreshold(uint256)": EventFragment;
    "RemovedOwner(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedOwner"): EventFragment;
}

export class OwnerManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OwnerManagerInterface;

  functions: {
    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    "getOwners()"(overrides?: CallOverrides): Promise<[string[]]>;
  };

  /**
   * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   * @param owner New owner address.
   */
  addOwnerWithThreshold(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   * @param owner New owner address.
   */
  "addOwnerWithThreshold(address,uint256)"(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   * @param owner Owner address to be removed.
   * @param prevOwner Owner that pointed to the owner to be removed in the linked list
   */
  removeOwner(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   * @param owner Owner address to be removed.
   * @param prevOwner Owner that pointed to the owner to be removed in the linked list
   */
  "removeOwner(address,address,uint256)"(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
   * @param newOwner New owner address.
   * @param oldOwner Owner address to be replaced.
   * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
   */
  swapOwner(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
   * @param newOwner New owner address.
   * @param oldOwner Owner address to be replaced.
   * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
   */
  "swapOwner(address,address,address)"(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   */
  changeThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   */
  "changeThreshold(uint256)"(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "getThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

  "isOwner(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns array of owners.
   * @returns Array of Safe owners.
   */
  getOwners(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns array of owners.
   * @returns Array of Safe owners.
   */
  "getOwners()"(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "getThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    getOwners(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    "getOwners()"(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    AddedOwner(owner: null): TypedEventFilter<[string], { owner: string }>;

    ChangedThreshold(
      threshold: null
    ): TypedEventFilter<[BigNumber], { threshold: BigNumber }>;

    RemovedOwner(owner: null): TypedEventFilter<[string], { owner: string }>;
  };

  estimateGas: {
    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "getThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    "getOwners()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getThreshold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    "getOwners()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
