/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC721TokenReceiverInterface extends ethers.utils.Interface {
  functions: {
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;

  events: {};
}

export class ERC721TokenReceiver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC721TokenReceiverInterface;

  functions: {
    /**
     * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _operator The address which called `safeTransferFrom` function
     * @param _tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
     */
    onERC721Received(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _operator The address which called `safeTransferFrom` function
     * @param _tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
     */
    "onERC721Received(address,address,uint256,bytes)"(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
   * Handle the receipt of an NFT
   * @param _data Additional data with no specified format
   * @param _from The address which previously owned the token
   * @param _operator The address which called `safeTransferFrom` function
   * @param _tokenId The NFT identifier which is being transferred
   * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
   */
  onERC721Received(
    _operator: string,
    _from: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
   * Handle the receipt of an NFT
   * @param _data Additional data with no specified format
   * @param _from The address which previously owned the token
   * @param _operator The address which called `safeTransferFrom` function
   * @param _tokenId The NFT identifier which is being transferred
   * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
   */
  "onERC721Received(address,address,uint256,bytes)"(
    _operator: string,
    _from: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _operator The address which called `safeTransferFrom` function
     * @param _tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
     */
    onERC721Received(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _operator The address which called `safeTransferFrom` function
     * @param _tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
     */
    "onERC721Received(address,address,uint256,bytes)"(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _operator The address which called `safeTransferFrom` function
     * @param _tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
     */
    onERC721Received(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _operator The address which called `safeTransferFrom` function
     * @param _tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
     */
    "onERC721Received(address,address,uint256,bytes)"(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _operator The address which called `safeTransferFrom` function
     * @param _tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
     */
    onERC721Received(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _operator The address which called `safeTransferFrom` function
     * @param _tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`  unless throwing
     */
    "onERC721Received(address,address,uint256,bytes)"(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
