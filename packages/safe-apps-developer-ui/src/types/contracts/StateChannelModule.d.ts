/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StateChannelModuleInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "changeMasterCopy(address)": FunctionFragment;
    "isExecuted(bytes32)": FunctionFragment;
    "manager()": FunctionFragment;
    "setup()": FunctionFragment;
    "execTransaction(address,uint256,bytes,uint8,uint256,bytes)": FunctionFragment;
    "getTransactionHash(address,uint256,bytes,uint8,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeMasterCopy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExecuted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "setup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMasterCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExecuted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;

  events: {
    "ChangedMasterCopy(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangedMasterCopy"): EventFragment;
}

export class StateChannelModule extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StateChannelModuleInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    "NAME()"(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    "VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExecuted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "isExecuted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    "manager()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Setup function sets manager
     */
    setup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Setup function sets manager
     */
    "setup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners.
     * @param data Data payload of Safe transaction.
     * @param nonce Nonce used for this Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners.
     * @param data Data payload of Safe transaction.
     * @param nonce Nonce used for this Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    "execTransaction(address,uint256,bytes,uint8,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns hash to be signed by owners.
     * @param data Data payload.
     * @param nonce Transaction nonce.
     * @param operation Operation type.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns hash to be signed by owners.
     * @param data Data payload.
     * @param nonce Transaction nonce.
     * @param operation Operation type.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    "getTransactionHash(address,uint256,bytes,uint8,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  "NAME()"(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  "VERSION()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to upgrade the contract. This can only be done via a Safe transaction.
   * @param _masterCopy New contract address.
   */
  changeMasterCopy(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to upgrade the contract. This can only be done via a Safe transaction.
   * @param _masterCopy New contract address.
   */
  "changeMasterCopy(address)"(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExecuted(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "isExecuted(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Setup function sets manager
   */
  setup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Setup function sets manager
   */
  "setup()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to execute a Safe transaction confirmed by required number of owners.
   * @param data Data payload of Safe transaction.
   * @param nonce Nonce used for this Safe transaction.
   * @param operation Operation type of Safe transaction.
   * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
   * @param to Destination address of Safe transaction.
   * @param value Ether value of Safe transaction.
   */
  execTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    nonce: BigNumberish,
    signatures: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to execute a Safe transaction confirmed by required number of owners.
   * @param data Data payload of Safe transaction.
   * @param nonce Nonce used for this Safe transaction.
   * @param operation Operation type of Safe transaction.
   * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
   * @param to Destination address of Safe transaction.
   * @param value Ether value of Safe transaction.
   */
  "execTransaction(address,uint256,bytes,uint8,uint256,bytes)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    nonce: BigNumberish,
    signatures: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns hash to be signed by owners.
   * @param data Data payload.
   * @param nonce Transaction nonce.
   * @param operation Operation type.
   * @param to Destination address.
   * @param value Ether value.
   * @returns Transaction hash.
   */
  getTransactionHash(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns hash to be signed by owners.
   * @param data Data payload.
   * @param nonce Transaction nonce.
   * @param operation Operation type.
   * @param to Destination address.
   * @param value Ether value.
   * @returns Transaction hash.
   */
  "getTransactionHash(address,uint256,bytes,uint8,uint256)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    "NAME()"(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    "VERSION()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isExecuted(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "isExecuted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Setup function sets manager
     */
    setup(overrides?: CallOverrides): Promise<void>;

    /**
     * Setup function sets manager
     */
    "setup()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners.
     * @param data Data payload of Safe transaction.
     * @param nonce Nonce used for this Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners.
     * @param data Data payload of Safe transaction.
     * @param nonce Nonce used for this Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    "execTransaction(address,uint256,bytes,uint8,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns hash to be signed by owners.
     * @param data Data payload.
     * @param nonce Transaction nonce.
     * @param operation Operation type.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns hash to be signed by owners.
     * @param data Data payload.
     * @param nonce Transaction nonce.
     * @param operation Operation type.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    "getTransactionHash(address,uint256,bytes,uint8,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    ChangedMasterCopy(
      masterCopy: null
    ): TypedEventFilter<[string], { masterCopy: string }>;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExecuted(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "isExecuted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Setup function sets manager
     */
    setup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Setup function sets manager
     */
    "setup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners.
     * @param data Data payload of Safe transaction.
     * @param nonce Nonce used for this Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners.
     * @param data Data payload of Safe transaction.
     * @param nonce Nonce used for this Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    "execTransaction(address,uint256,bytes,uint8,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns hash to be signed by owners.
     * @param data Data payload.
     * @param nonce Transaction nonce.
     * @param operation Operation type.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns hash to be signed by owners.
     * @param data Data payload.
     * @param nonce Transaction nonce.
     * @param operation Operation type.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    "getTransactionHash(address,uint256,bytes,uint8,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NAME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERSION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExecuted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExecuted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Setup function sets manager
     */
    setup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Setup function sets manager
     */
    "setup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners.
     * @param data Data payload of Safe transaction.
     * @param nonce Nonce used for this Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners.
     * @param data Data payload of Safe transaction.
     * @param nonce Nonce used for this Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    "execTransaction(address,uint256,bytes,uint8,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns hash to be signed by owners.
     * @param data Data payload.
     * @param nonce Transaction nonce.
     * @param operation Operation type.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns hash to be signed by owners.
     * @param data Data payload.
     * @param nonce Transaction nonce.
     * @param operation Operation type.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    "getTransactionHash(address,uint256,bytes,uint8,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
