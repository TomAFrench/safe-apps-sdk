/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ModuleManagerInterface extends ethers.utils.Interface {
  functions: {
    "enableModule(address)": FunctionFragment;
    "disableModule(address,address)": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
    "getModules()": FunctionFragment;
    "getModulesPaginated(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "enableModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;

  events: {
    "DisabledModule(address)": EventFragment;
    "EnabledModule(address)": EventFragment;
    "ExecutionFromModuleFailure(address)": EventFragment;
    "ExecutionFromModuleSuccess(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleSuccess"): EventFragment;
}

export class ModuleManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ModuleManagerInterface;

  functions: {
    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    "enableModule(address)"(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    getModules(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    "getModules()"(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;
  };

  /**
   * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
   * @param module Module to be whitelisted.
   */
  enableModule(
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
   * @param module Module to be whitelisted.
   */
  "enableModule(address)"(
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
   * @param module Module to be removed.
   * @param prevModule Module that pointed to the module to be removed in the linked list
   */
  disableModule(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
   * @param module Module to be removed.
   * @param prevModule Module that pointed to the module to be removed in the linked list
   */
  "disableModule(address,address)"(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations.
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations.
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  "execTransactionFromModule(address,uint256,bytes,uint8)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations and return data
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations and return data
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns array of first 10 modules.
   * @returns Array of modules.
   */
  getModules(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns array of first 10 modules.
   * @returns Array of modules.
   */
  "getModules()"(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns array of modules.
   * @param pageSize Maximum number of modules that should be returned.
   * @param start Start of the page.
   * @returns Array of modules.
   */
  getModulesPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  /**
   * Returns array of modules.
   * @param pageSize Maximum number of modules that should be returned.
   * @param start Start of the page.
   * @returns Array of modules.
   */
  "getModulesPaginated(address,uint256)"(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  callStatic: {
    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    enableModule(module: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    "enableModule(address)"(
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    getModules(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    "getModules()"(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;
  };

  filters: {
    DisabledModule(
      module: null
    ): TypedEventFilter<[string], { module: string }>;

    EnabledModule(module: null): TypedEventFilter<[string], { module: string }>;

    ExecutionFromModuleFailure(
      module: string | null
    ): TypedEventFilter<[string], { module: string }>;

    ExecutionFromModuleSuccess(
      module: string | null
    ): TypedEventFilter<[string], { module: string }>;
  };

  estimateGas: {
    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    "enableModule(address)"(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    getModules(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    "getModules()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    "enableModule(address)"(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    getModules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    "getModules()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
