/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC1155TokenInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "mint(address,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;

  events: {};
}

export class ERC1155Token extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC1155TokenInterface;

  functions: {
    /**
     * Get the specified address' balance for token with specified ID.
     * @param id ID of the token
     * @param owner The address of the token holder
     * @returns The owner's balance of the token type requested
     */
    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Get the specified address' balance for token with specified ID.
     * @param id ID of the token
     * @param owner The address of the token holder
     * @returns The owner's balance of the token type requested
     */
    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param from Source address
     * @param id ID of the token type
     * @param to Target address
     * @param value Transfer amount
     */
    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param from Source address
     * @param id ID of the token type
     * @param to Target address
     * @param value Transfer amount
     */
    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Test function to mint an amount of a token with the given ID
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param id ID of the token to be minted
     * @param to The address that will own the minted token
     * @param value Amount of the token to be minted
     */
    mint(
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Test function to mint an amount of a token with the given ID
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param id ID of the token to be minted
     * @param to The address that will own the minted token
     * @param value Amount of the token to be minted
     */
    "mint(address,uint256,uint256,bytes)"(
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Get the specified address' balance for token with specified ID.
   * @param id ID of the token
   * @param owner The address of the token holder
   * @returns The owner's balance of the token type requested
   */
  balanceOf(
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Get the specified address' balance for token with specified ID.
   * @param id ID of the token
   * @param owner The address of the token holder
   * @returns The owner's balance of the token type requested
   */
  "balanceOf(address,uint256)"(
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
   * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
   * @param from Source address
   * @param id ID of the token type
   * @param to Target address
   * @param value Transfer amount
   */
  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
   * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
   * @param from Source address
   * @param id ID of the token type
   * @param to Target address
   * @param value Transfer amount
   */
  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Test function to mint an amount of a token with the given ID
   * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
   * @param id ID of the token to be minted
   * @param to The address that will own the minted token
   * @param value Amount of the token to be minted
   */
  mint(
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Test function to mint an amount of a token with the given ID
   * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
   * @param id ID of the token to be minted
   * @param to The address that will own the minted token
   * @param value Amount of the token to be minted
   */
  "mint(address,uint256,uint256,bytes)"(
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Get the specified address' balance for token with specified ID.
     * @param id ID of the token
     * @param owner The address of the token holder
     * @returns The owner's balance of the token type requested
     */
    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the specified address' balance for token with specified ID.
     * @param id ID of the token
     * @param owner The address of the token holder
     * @returns The owner's balance of the token type requested
     */
    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param from Source address
     * @param id ID of the token type
     * @param to Target address
     * @param value Transfer amount
     */
    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param from Source address
     * @param id ID of the token type
     * @param to Target address
     * @param value Transfer amount
     */
    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Test function to mint an amount of a token with the given ID
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param id ID of the token to be minted
     * @param to The address that will own the minted token
     * @param value Amount of the token to be minted
     */
    mint(
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Test function to mint an amount of a token with the given ID
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param id ID of the token to be minted
     * @param to The address that will own the minted token
     * @param value Amount of the token to be minted
     */
    "mint(address,uint256,uint256,bytes)"(
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Get the specified address' balance for token with specified ID.
     * @param id ID of the token
     * @param owner The address of the token holder
     * @returns The owner's balance of the token type requested
     */
    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the specified address' balance for token with specified ID.
     * @param id ID of the token
     * @param owner The address of the token holder
     * @returns The owner's balance of the token type requested
     */
    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param from Source address
     * @param id ID of the token type
     * @param to Target address
     * @param value Transfer amount
     */
    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param from Source address
     * @param id ID of the token type
     * @param to Target address
     * @param value Transfer amount
     */
    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Test function to mint an amount of a token with the given ID
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param id ID of the token to be minted
     * @param to The address that will own the minted token
     * @param value Amount of the token to be minted
     */
    mint(
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Test function to mint an amount of a token with the given ID
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param id ID of the token to be minted
     * @param to The address that will own the minted token
     * @param value Amount of the token to be minted
     */
    "mint(address,uint256,uint256,bytes)"(
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Get the specified address' balance for token with specified ID.
     * @param id ID of the token
     * @param owner The address of the token holder
     * @returns The owner's balance of the token type requested
     */
    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the specified address' balance for token with specified ID.
     * @param id ID of the token
     * @param owner The address of the token holder
     * @returns The owner's balance of the token type requested
     */
    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param from Source address
     * @param id ID of the token type
     * @param to Target address
     * @param value Transfer amount
     */
    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param from Source address
     * @param id ID of the token type
     * @param to Target address
     * @param value Transfer amount
     */
    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Test function to mint an amount of a token with the given ID
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param id ID of the token to be minted
     * @param to The address that will own the minted token
     * @param value Amount of the token to be minted
     */
    mint(
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Test function to mint an amount of a token with the given ID
     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver
     * @param id ID of the token to be minted
     * @param to The address that will own the minted token
     * @param value Amount of the token to be minted
     */
    "mint(address,uint256,uint256,bytes)"(
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
