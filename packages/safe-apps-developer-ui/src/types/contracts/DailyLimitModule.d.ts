/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DailyLimitModuleInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "changeMasterCopy(address)": FunctionFragment;
    "dailyLimits(address)": FunctionFragment;
    "manager()": FunctionFragment;
    "setup(address[],uint256[])": FunctionFragment;
    "changeDailyLimit(address,uint256)": FunctionFragment;
    "executeDailyLimit(address,address,uint256)": FunctionFragment;
    "today()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeMasterCopy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "dailyLimits", values: [string]): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDailyLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDailyLimit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "today", values?: undefined): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMasterCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "today", data: BytesLike): Result;

  events: {
    "ChangedMasterCopy(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangedMasterCopy"): EventFragment;
}

export class DailyLimitModule extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DailyLimitModuleInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    "NAME()"(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    "VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dailyLimits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dailyLimit: BigNumber;
        spentToday: BigNumber;
        lastDay: BigNumber;
      }
    >;

    "dailyLimits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dailyLimit: BigNumber;
        spentToday: BigNumber;
        lastDay: BigNumber;
      }
    >;

    manager(overrides?: CallOverrides): Promise<[string]>;

    "manager()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Setup function sets initial storage of contract.
     * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
     * @param tokens List of token addresses. Ether is represented with address 0x0.
     */
    setup(
      tokens: string[],
      _dailyLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Setup function sets initial storage of contract.
     * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
     * @param tokens List of token addresses. Ether is represented with address 0x0.
     */
    "setup(address[],uint256[])"(
      tokens: string[],
      _dailyLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
     * @param dailyLimit Daily limit in smallest token unit.
     * @param token Token contract address.
     */
    changeDailyLimit(
      token: string,
      dailyLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
     * @param dailyLimit Daily limit in smallest token unit.
     * @param token Token contract address.
     */
    "changeDailyLimit(address,uint256)"(
      token: string,
      dailyLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns if Safe transaction is a valid daily limit transaction.
     * @param amount Amount of tokens (or Ether) that should be transfered
     * @param to Address to which the tokens should be transfered
     * @param token Address of the token that should be transfered (0 for Ether)
     * @returns Returns if transaction can be executed.
     */
    executeDailyLimit(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns if Safe transaction is a valid daily limit transaction.
     * @param amount Amount of tokens (or Ether) that should be transfered
     * @param to Address to which the tokens should be transfered
     * @param token Address of the token that should be transfered (0 for Ether)
     * @returns Returns if transaction can be executed.
     */
    "executeDailyLimit(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns last midnight as Unix timestamp.
     * @returns Unix timestamp.
     */
    today(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns last midnight as Unix timestamp.
     * @returns Unix timestamp.
     */
    "today()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  "NAME()"(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  "VERSION()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to upgrade the contract. This can only be done via a Safe transaction.
   * @param _masterCopy New contract address.
   */
  changeMasterCopy(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to upgrade the contract. This can only be done via a Safe transaction.
   * @param _masterCopy New contract address.
   */
  "changeMasterCopy(address)"(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dailyLimits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dailyLimit: BigNumber;
      spentToday: BigNumber;
      lastDay: BigNumber;
    }
  >;

  "dailyLimits(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dailyLimit: BigNumber;
      spentToday: BigNumber;
      lastDay: BigNumber;
    }
  >;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Setup function sets initial storage of contract.
   * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
   * @param tokens List of token addresses. Ether is represented with address 0x0.
   */
  setup(
    tokens: string[],
    _dailyLimits: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Setup function sets initial storage of contract.
   * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
   * @param tokens List of token addresses. Ether is represented with address 0x0.
   */
  "setup(address[],uint256[])"(
    tokens: string[],
    _dailyLimits: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
   * @param dailyLimit Daily limit in smallest token unit.
   * @param token Token contract address.
   */
  changeDailyLimit(
    token: string,
    dailyLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
   * @param dailyLimit Daily limit in smallest token unit.
   * @param token Token contract address.
   */
  "changeDailyLimit(address,uint256)"(
    token: string,
    dailyLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns if Safe transaction is a valid daily limit transaction.
   * @param amount Amount of tokens (or Ether) that should be transfered
   * @param to Address to which the tokens should be transfered
   * @param token Address of the token that should be transfered (0 for Ether)
   * @returns Returns if transaction can be executed.
   */
  executeDailyLimit(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns if Safe transaction is a valid daily limit transaction.
   * @param amount Amount of tokens (or Ether) that should be transfered
   * @param to Address to which the tokens should be transfered
   * @param token Address of the token that should be transfered (0 for Ether)
   * @returns Returns if transaction can be executed.
   */
  "executeDailyLimit(address,address,uint256)"(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns last midnight as Unix timestamp.
   * @returns Unix timestamp.
   */
  today(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns last midnight as Unix timestamp.
   * @returns Unix timestamp.
   */
  "today()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    "NAME()"(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    "VERSION()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dailyLimits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dailyLimit: BigNumber;
        spentToday: BigNumber;
        lastDay: BigNumber;
      }
    >;

    "dailyLimits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dailyLimit: BigNumber;
        spentToday: BigNumber;
        lastDay: BigNumber;
      }
    >;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Setup function sets initial storage of contract.
     * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
     * @param tokens List of token addresses. Ether is represented with address 0x0.
     */
    setup(
      tokens: string[],
      _dailyLimits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Setup function sets initial storage of contract.
     * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
     * @param tokens List of token addresses. Ether is represented with address 0x0.
     */
    "setup(address[],uint256[])"(
      tokens: string[],
      _dailyLimits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
     * @param dailyLimit Daily limit in smallest token unit.
     * @param token Token contract address.
     */
    changeDailyLimit(
      token: string,
      dailyLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
     * @param dailyLimit Daily limit in smallest token unit.
     * @param token Token contract address.
     */
    "changeDailyLimit(address,uint256)"(
      token: string,
      dailyLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns if Safe transaction is a valid daily limit transaction.
     * @param amount Amount of tokens (or Ether) that should be transfered
     * @param to Address to which the tokens should be transfered
     * @param token Address of the token that should be transfered (0 for Ether)
     * @returns Returns if transaction can be executed.
     */
    executeDailyLimit(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns if Safe transaction is a valid daily limit transaction.
     * @param amount Amount of tokens (or Ether) that should be transfered
     * @param to Address to which the tokens should be transfered
     * @param token Address of the token that should be transfered (0 for Ether)
     * @returns Returns if transaction can be executed.
     */
    "executeDailyLimit(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns last midnight as Unix timestamp.
     * @returns Unix timestamp.
     */
    today(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns last midnight as Unix timestamp.
     * @returns Unix timestamp.
     */
    "today()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    ChangedMasterCopy(
      masterCopy: null
    ): TypedEventFilter<[string], { masterCopy: string }>;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dailyLimits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "dailyLimits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Setup function sets initial storage of contract.
     * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
     * @param tokens List of token addresses. Ether is represented with address 0x0.
     */
    setup(
      tokens: string[],
      _dailyLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Setup function sets initial storage of contract.
     * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
     * @param tokens List of token addresses. Ether is represented with address 0x0.
     */
    "setup(address[],uint256[])"(
      tokens: string[],
      _dailyLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
     * @param dailyLimit Daily limit in smallest token unit.
     * @param token Token contract address.
     */
    changeDailyLimit(
      token: string,
      dailyLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
     * @param dailyLimit Daily limit in smallest token unit.
     * @param token Token contract address.
     */
    "changeDailyLimit(address,uint256)"(
      token: string,
      dailyLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns if Safe transaction is a valid daily limit transaction.
     * @param amount Amount of tokens (or Ether) that should be transfered
     * @param to Address to which the tokens should be transfered
     * @param token Address of the token that should be transfered (0 for Ether)
     * @returns Returns if transaction can be executed.
     */
    executeDailyLimit(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns if Safe transaction is a valid daily limit transaction.
     * @param amount Amount of tokens (or Ether) that should be transfered
     * @param to Address to which the tokens should be transfered
     * @param token Address of the token that should be transfered (0 for Ether)
     * @returns Returns if transaction can be executed.
     */
    "executeDailyLimit(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns last midnight as Unix timestamp.
     * @returns Unix timestamp.
     */
    today(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns last midnight as Unix timestamp.
     * @returns Unix timestamp.
     */
    "today()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NAME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERSION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dailyLimits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dailyLimits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Setup function sets initial storage of contract.
     * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
     * @param tokens List of token addresses. Ether is represented with address 0x0.
     */
    setup(
      tokens: string[],
      _dailyLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Setup function sets initial storage of contract.
     * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
     * @param tokens List of token addresses. Ether is represented with address 0x0.
     */
    "setup(address[],uint256[])"(
      tokens: string[],
      _dailyLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
     * @param dailyLimit Daily limit in smallest token unit.
     * @param token Token contract address.
     */
    changeDailyLimit(
      token: string,
      dailyLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
     * @param dailyLimit Daily limit in smallest token unit.
     * @param token Token contract address.
     */
    "changeDailyLimit(address,uint256)"(
      token: string,
      dailyLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns if Safe transaction is a valid daily limit transaction.
     * @param amount Amount of tokens (or Ether) that should be transfered
     * @param to Address to which the tokens should be transfered
     * @param token Address of the token that should be transfered (0 for Ether)
     * @returns Returns if transaction can be executed.
     */
    executeDailyLimit(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns if Safe transaction is a valid daily limit transaction.
     * @param amount Amount of tokens (or Ether) that should be transfered
     * @param to Address to which the tokens should be transfered
     * @param token Address of the token that should be transfered (0 for Ether)
     * @returns Returns if transaction can be executed.
     */
    "executeDailyLimit(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns last midnight as Unix timestamp.
     * @returns Unix timestamp.
     */
    today(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns last midnight as Unix timestamp.
     * @returns Unix timestamp.
     */
    "today()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
