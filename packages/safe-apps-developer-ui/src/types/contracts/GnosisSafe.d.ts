/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GnosisSafeInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addOwnerWithThreshold(address,uint256)": FunctionFragment;
    "approvedHashes(address,bytes32)": FunctionFragment;
    "changeMasterCopy(address)": FunctionFragment;
    "changeThreshold(uint256)": FunctionFragment;
    "disableModule(address,address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "enableModule(address)": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
    "getModules()": FunctionFragment;
    "getModulesPaginated(address,uint256)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "removeOwner(address,address,uint256)": FunctionFragment;
    "setFallbackHandler(address)": FunctionFragment;
    "signedMessages(bytes32)": FunctionFragment;
    "swapOwner(address,address,address)": FunctionFragment;
    "setup(address[],uint256,address,bytes,address,address,uint256,address)": FunctionFragment;
    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "requiredTxGas(address,uint256,bytes,uint8)": FunctionFragment;
    "approveHash(bytes32)": FunctionFragment;
    "signMessage(bytes)": FunctionFragment;
    "isValidSignature(bytes,bytes)": FunctionFragment;
    "getMessageHash(bytes)": FunctionFragment;
    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": FunctionFragment;
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOwnerWithThreshold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedHashes",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMasterCopy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackHandler",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "signedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOwner",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      string[],
      BigNumberish,
      string,
      BytesLike,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredTxGas",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransactionData",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOwnerWithThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMasterCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredTxGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransactionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;

  events: {
    "AddedOwner(address)": EventFragment;
    "ApproveHash(bytes32,address)": EventFragment;
    "ChangedMasterCopy(address)": EventFragment;
    "ChangedThreshold(uint256)": EventFragment;
    "DisabledModule(address)": EventFragment;
    "EnabledModule(address)": EventFragment;
    "ExecutionFailure(bytes32,uint256)": EventFragment;
    "ExecutionFromModuleFailure(address)": EventFragment;
    "ExecutionFromModuleSuccess(address)": EventFragment;
    "ExecutionSuccess(bytes32,uint256)": EventFragment;
    "RemovedOwner(address)": EventFragment;
    "SignMsg(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedMasterCopy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignMsg"): EventFragment;
}

export class GnosisSafe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GnosisSafeInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    "NAME()"(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    "VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "approvedHashes(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    "enableModule(address)"(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    getModules(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    "getModules()"(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    "getOwners()"(overrides?: CallOverrides): Promise<[string[]]>;

    getThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonce()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    "setFallbackHandler(address)"(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "signedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
     * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
     * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
     */
    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
     */
    "requiredTxGas(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    "approveHash(bytes32)"(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Marks a message as signed
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Marks a message as signed
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    "signMessage(bytes)"(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     * @returns a bool upon valid or invalid signature with corresponding _data
     */
    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     * @returns a bool upon valid or invalid signature with corresponding _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @returns Message hash.
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @returns Message hash.
     */
    "getMessageHash(bytes)"(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash bytes.
     */
    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash bytes.
     */
    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  "NAME()"(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  "VERSION()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   * @param owner New owner address.
   */
  addOwnerWithThreshold(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   * @param owner New owner address.
   */
  "addOwnerWithThreshold(address,uint256)"(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedHashes(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "approvedHashes(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Allows to upgrade the contract. This can only be done via a Safe transaction.
   * @param _masterCopy New contract address.
   */
  changeMasterCopy(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to upgrade the contract. This can only be done via a Safe transaction.
   * @param _masterCopy New contract address.
   */
  "changeMasterCopy(address)"(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   */
  changeThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   */
  "changeThreshold(uint256)"(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
   * @param module Module to be removed.
   * @param prevModule Module that pointed to the module to be removed in the linked list
   */
  disableModule(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
   * @param module Module to be removed.
   * @param prevModule Module that pointed to the module to be removed in the linked list
   */
  "disableModule(address,address)"(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
   * @param module Module to be whitelisted.
   */
  enableModule(
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
   * @param module Module to be whitelisted.
   */
  "enableModule(address)"(
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations.
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations.
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  "execTransactionFromModule(address,uint256,bytes,uint8)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations and return data
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations and return data
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns array of first 10 modules.
   * @returns Array of modules.
   */
  getModules(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns array of first 10 modules.
   * @returns Array of modules.
   */
  "getModules()"(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns array of modules.
   * @param pageSize Maximum number of modules that should be returned.
   * @param start Start of the page.
   * @returns Array of modules.
   */
  getModulesPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  /**
   * Returns array of modules.
   * @param pageSize Maximum number of modules that should be returned.
   * @param start Start of the page.
   * @returns Array of modules.
   */
  "getModulesPaginated(address,uint256)"(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  /**
   * Returns array of owners.
   * @returns Array of Safe owners.
   */
  getOwners(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns array of owners.
   * @returns Array of Safe owners.
   */
  "getOwners()"(overrides?: CallOverrides): Promise<string[]>;

  getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "getThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

  "isOwner(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  "nonce()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   * @param owner Owner address to be removed.
   * @param prevOwner Owner that pointed to the owner to be removed in the linked list
   */
  removeOwner(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * @param _threshold New threshold.
   * @param owner Owner address to be removed.
   * @param prevOwner Owner that pointed to the owner to be removed in the linked list
   */
  "removeOwner(address,address,uint256)"(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
   * @param handler contract to handle fallbacks calls.
   */
  setFallbackHandler(
    handler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
   * @param handler contract to handle fallbacks calls.
   */
  "setFallbackHandler(address)"(
    handler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signedMessages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "signedMessages(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
   * @param newOwner New owner address.
   * @param oldOwner Owner address to be replaced.
   * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
   */
  swapOwner(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
   * @param newOwner New owner address.
   * @param oldOwner Owner address to be replaced.
   * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
   */
  "swapOwner(address,address,address)"(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Setup function sets initial storage of contract.
   * @param _owners List of Safe owners.
   * @param _threshold Number of required confirmations for a Safe transaction.
   * @param data Data payload for optional delegate call.
   * @param fallbackHandler Handler for fallback calls to this contract
   * @param payment Value that should be paid
   * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
   * @param paymentToken Token that should be used for the payment (0 is ETH)
   * @param to Contract address for optional delegate call.
   */
  setup(
    _owners: string[],
    _threshold: BigNumberish,
    to: string,
    data: BytesLike,
    fallbackHandler: string,
    paymentToken: string,
    payment: BigNumberish,
    paymentReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Setup function sets initial storage of contract.
   * @param _owners List of Safe owners.
   * @param _threshold Number of required confirmations for a Safe transaction.
   * @param data Data payload for optional delegate call.
   * @param fallbackHandler Handler for fallback calls to this contract
   * @param payment Value that should be paid
   * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
   * @param paymentToken Token that should be used for the payment (0 is ETH)
   * @param to Contract address for optional delegate call.
   */
  "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
    _owners: string[],
    _threshold: BigNumberish,
    to: string,
    data: BytesLike,
    fallbackHandler: string,
    paymentToken: string,
    payment: BigNumberish,
    paymentReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
   * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
   * @param data Data payload of Safe transaction.
   * @param gasPrice Gas price that should be used for the payment calculation.
   * @param gasToken Token address (or 0 if ETH) that is used for the payment.
   * @param operation Operation type of Safe transaction.
   * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
   * @param safeTxGas Gas that should be used for the Safe transaction.
   * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
   * @param to Destination address of Safe transaction.
   * @param value Ether value of Safe transaction.
   */
  execTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
   * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
   * @param data Data payload of Safe transaction.
   * @param gasPrice Gas price that should be used for the payment calculation.
   * @param gasToken Token address (or 0 if ETH) that is used for the payment.
   * @param operation Operation type of Safe transaction.
   * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
   * @param safeTxGas Gas that should be used for the Safe transaction.
   * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
   * @param to Destination address of Safe transaction.
   * @param value Ether value of Safe transaction.
   */
  "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
   * @param data Data payload of Safe transaction.
   * @param operation Operation type of Safe transaction.
   * @param to Destination address of Safe transaction.
   * @param value Ether value of Safe transaction.
   * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
   */
  requiredTxGas(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
   * @param data Data payload of Safe transaction.
   * @param operation Operation type of Safe transaction.
   * @param to Destination address of Safe transaction.
   * @param value Ether value of Safe transaction.
   * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
   */
  "requiredTxGas(address,uint256,bytes,uint8)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
   * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
   */
  approveHash(
    hashToApprove: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
   * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
   */
  "approveHash(bytes32)"(
    hashToApprove: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Marks a message as signed
   * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
   */
  signMessage(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Marks a message as signed
   * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
   */
  "signMessage(bytes)"(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
   * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
   * @param _data Arbitrary length data signed on the behalf of address(this)
   * @param _signature Signature byte array associated with _data
   * @returns a bool upon valid or invalid signature with corresponding _data
   */
  isValidSignature(
    _data: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
   * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
   * @param _data Arbitrary length data signed on the behalf of address(this)
   * @param _signature Signature byte array associated with _data
   * @returns a bool upon valid or invalid signature with corresponding _data
   */
  "isValidSignature(bytes,bytes)"(
    _data: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns hash of a message that can be signed by owners.
   * @param message Message that should be hashed
   * @returns Message hash.
   */
  getMessageHash(
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns hash of a message that can be signed by owners.
   * @param message Message that should be hashed
   * @returns Message hash.
   */
  "getMessageHash(bytes)"(
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the bytes that are hashed to be signed by owners.
   * @param _nonce Transaction nonce.
   * @param baseGas Gas costs for data used to trigger the safe transaction.
   * @param data Data payload.
   * @param gasPrice Maximum gas price that should be used for this transaction.
   * @param gasToken Token address (or 0 if ETH) that is used for the payment.
   * @param operation Operation type.
   * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
   * @param safeTxGas Fas that should be used for the safe transaction.
   * @param to Destination address.
   * @param value Ether value.
   * @returns Transaction hash bytes.
   */
  encodeTransactionData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the bytes that are hashed to be signed by owners.
   * @param _nonce Transaction nonce.
   * @param baseGas Gas costs for data used to trigger the safe transaction.
   * @param data Data payload.
   * @param gasPrice Maximum gas price that should be used for this transaction.
   * @param gasToken Token address (or 0 if ETH) that is used for the payment.
   * @param operation Operation type.
   * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
   * @param safeTxGas Fas that should be used for the safe transaction.
   * @param to Destination address.
   * @param value Ether value.
   * @returns Transaction hash bytes.
   */
  "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns hash to be signed by owners.
   * @param _nonce Transaction nonce.
   * @param baseGas Gas costs for data used to trigger the safe transaction.
   * @param data Data payload.
   * @param gasPrice Maximum gas price that should be used for this transaction.
   * @param gasToken Token address (or 0 if ETH) that is used for the payment.
   * @param operation Operation type.
   * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
   * @param safeTxGas Fas that should be used for the safe transaction.
   * @param to Destination address.
   * @param value Ether value.
   * @returns Transaction hash.
   */
  getTransactionHash(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns hash to be signed by owners.
   * @param _nonce Transaction nonce.
   * @param baseGas Gas costs for data used to trigger the safe transaction.
   * @param data Data payload.
   * @param gasPrice Maximum gas price that should be used for this transaction.
   * @param gasToken Token address (or 0 if ETH) that is used for the payment.
   * @param operation Operation type.
   * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
   * @param safeTxGas Fas that should be used for the safe transaction.
   * @param to Destination address.
   * @param value Ether value.
   * @returns Transaction hash.
   */
  "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    "NAME()"(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    "VERSION()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedHashes(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    enableModule(module: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    "enableModule(address)"(
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    getModules(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    "getModules()"(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    getOwners(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    "getOwners()"(overrides?: CallOverrides): Promise<string[]>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "getThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    "nonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    setFallbackHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    "setFallbackHandler(address)"(
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "signedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
     * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
     * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
     */
    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
     */
    "requiredTxGas(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    approveHash(
      hashToApprove: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    "approveHash(bytes32)"(
      hashToApprove: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Marks a message as signed
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    signMessage(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    /**
     * Marks a message as signed
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    "signMessage(bytes)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     * @returns a bool upon valid or invalid signature with corresponding _data
     */
    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     * @returns a bool upon valid or invalid signature with corresponding _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @returns Message hash.
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @returns Message hash.
     */
    "getMessageHash(bytes)"(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash bytes.
     */
    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash bytes.
     */
    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    AddedOwner(owner: null): TypedEventFilter<[string], { owner: string }>;

    ApproveHash(
      approvedHash: BytesLike | null,
      owner: string | null
    ): TypedEventFilter<
      [string, string],
      { approvedHash: string; owner: string }
    >;

    ChangedMasterCopy(
      masterCopy: null
    ): TypedEventFilter<[string], { masterCopy: string }>;

    ChangedThreshold(
      threshold: null
    ): TypedEventFilter<[BigNumber], { threshold: BigNumber }>;

    DisabledModule(
      module: null
    ): TypedEventFilter<[string], { module: string }>;

    EnabledModule(module: null): TypedEventFilter<[string], { module: string }>;

    ExecutionFailure(
      txHash: null,
      payment: null
    ): TypedEventFilter<
      [string, BigNumber],
      { txHash: string; payment: BigNumber }
    >;

    ExecutionFromModuleFailure(
      module: string | null
    ): TypedEventFilter<[string], { module: string }>;

    ExecutionFromModuleSuccess(
      module: string | null
    ): TypedEventFilter<[string], { module: string }>;

    ExecutionSuccess(
      txHash: null,
      payment: null
    ): TypedEventFilter<
      [string, BigNumber],
      { txHash: string; payment: BigNumber }
    >;

    RemovedOwner(owner: null): TypedEventFilter<[string], { owner: string }>;

    SignMsg(
      msgHash: BytesLike | null
    ): TypedEventFilter<[string], { msgHash: string }>;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedHashes(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    "enableModule(address)"(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    getModules(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    "getModules()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    "getOwners()"(overrides?: CallOverrides): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "getThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    "nonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    "setFallbackHandler(address)"(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "signedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
     * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
     * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
     */
    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
     */
    "requiredTxGas(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    "approveHash(bytes32)"(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Marks a message as signed
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Marks a message as signed
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    "signMessage(bytes)"(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     * @returns a bool upon valid or invalid signature with corresponding _data
     */
    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     * @returns a bool upon valid or invalid signature with corresponding _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @returns Message hash.
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @returns Message hash.
     */
    "getMessageHash(bytes)"(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash bytes.
     */
    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash bytes.
     */
    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NAME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERSION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedHashes(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    "changeMasterCopy(address)"(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     */
    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * @param module Module to be whitelisted.
     */
    "enableModule(address)"(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    getModules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns array of first 10 modules.
     * @returns Array of modules.
     */
    "getModules()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     * @returns Array of modules.
     */
    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns array of owners.
     * @returns Array of Safe owners.
     */
    "getOwners()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getThreshold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nonce()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    "setFallbackHandler(address)"(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "signedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
     * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transfered, even if the user transaction fails.
     * @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
     */
    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore two different protection mechanism against execution in a transaction have been made:      1.) The method can only be called from the safe itself      2.) The response is returned with a revert      When estimating set `from` to the address of the safe.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     * @returns Estimate without refunds and overhead fees (base transaction and payload data gas costs).
     */
    "requiredTxGas(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    "approveHash(bytes32)"(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Marks a message as signed
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Marks a message as signed
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    "signMessage(bytes)"(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     * @returns a bool upon valid or invalid signature with corresponding _data
     */
    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Should return whether the signature provided is valid for the provided data.      The save does not implement the interface since `checkSignatures` is not a view method.      The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     * @returns a bool upon valid or invalid signature with corresponding _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @returns Message hash.
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @returns Message hash.
     */
    "getMessageHash(bytes)"(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash bytes.
     */
    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash bytes.
     */
    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     * @returns Transaction hash.
     */
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
