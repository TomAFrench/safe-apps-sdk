/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GnosisSafeProxyFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createProxy(address,bytes)": FunctionFragment;
    "proxyRuntimeCode()": FunctionFragment;
    "proxyCreationCode()": FunctionFragment;
    "createProxyWithNonce(address,bytes,uint256)": FunctionFragment;
    "createProxyWithCallback(address,bytes,uint256,address)": FunctionFragment;
    "calculateCreateProxyWithNonceAddress(address,bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createProxy",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyRuntimeCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProxyWithNonce",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProxyWithCallback",
    values: [string, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCreateProxyWithNonceAddress",
    values: [string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyRuntimeCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProxyWithNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProxyWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCreateProxyWithNonceAddress",
    data: BytesLike
  ): Result;

  events: {
    "ProxyCreation(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProxyCreation"): EventFragment;
}

export class GnosisSafeProxyFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GnosisSafeProxyFactoryInterface;

  functions: {
    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param data Payload for message call sent to new proxy contract.
     * @param masterCopy Address of master copy.
     */
    createProxy(
      masterCopy: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param data Payload for message call sent to new proxy contract.
     * @param masterCopy Address of master copy.
     */
    "createProxy(address,bytes)"(
      masterCopy: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
     */
    proxyRuntimeCode(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
     */
    "proxyRuntimeCode()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
     */
    proxyCreationCode(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
     */
    "proxyCreationCode()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    createProxyWithNonce(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "createProxyWithNonce(address,bytes,uint256)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
     * @param _mastercopy Address of master copy.
     * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    createProxyWithCallback(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
     * @param _mastercopy Address of master copy.
     * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "createProxyWithCallback(address,bytes,uint256,address)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    calculateCreateProxyWithNonceAddress(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
   * @param data Payload for message call sent to new proxy contract.
   * @param masterCopy Address of master copy.
   */
  createProxy(
    masterCopy: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
   * @param data Payload for message call sent to new proxy contract.
   * @param masterCopy Address of master copy.
   */
  "createProxy(address,bytes)"(
    masterCopy: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
   */
  proxyRuntimeCode(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
   */
  "proxyRuntimeCode()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
   */
  proxyCreationCode(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
   */
  "proxyCreationCode()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
   * @param _mastercopy Address of master copy.
   * @param initializer Payload for message call sent to new proxy contract.
   * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
   */
  createProxyWithNonce(
    _mastercopy: string,
    initializer: BytesLike,
    saltNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
   * @param _mastercopy Address of master copy.
   * @param initializer Payload for message call sent to new proxy contract.
   * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
   */
  "createProxyWithNonce(address,bytes,uint256)"(
    _mastercopy: string,
    initializer: BytesLike,
    saltNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
   * @param _mastercopy Address of master copy.
   * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
   * @param initializer Payload for message call sent to new proxy contract.
   * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
   */
  createProxyWithCallback(
    _mastercopy: string,
    initializer: BytesLike,
    saltNonce: BigNumberish,
    callback: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
   * @param _mastercopy Address of master copy.
   * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
   * @param initializer Payload for message call sent to new proxy contract.
   * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
   */
  "createProxyWithCallback(address,bytes,uint256,address)"(
    _mastercopy: string,
    initializer: BytesLike,
    saltNonce: BigNumberish,
    callback: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
   * @param _mastercopy Address of master copy.
   * @param initializer Payload for message call sent to new proxy contract.
   * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
   */
  calculateCreateProxyWithNonceAddress(
    _mastercopy: string,
    initializer: BytesLike,
    saltNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
   * @param _mastercopy Address of master copy.
   * @param initializer Payload for message call sent to new proxy contract.
   * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
   */
  "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"(
    _mastercopy: string,
    initializer: BytesLike,
    saltNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param data Payload for message call sent to new proxy contract.
     * @param masterCopy Address of master copy.
     */
    createProxy(
      masterCopy: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param data Payload for message call sent to new proxy contract.
     * @param masterCopy Address of master copy.
     */
    "createProxy(address,bytes)"(
      masterCopy: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
     */
    proxyRuntimeCode(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
     */
    "proxyRuntimeCode()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
     */
    proxyCreationCode(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
     */
    "proxyCreationCode()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    createProxyWithNonce(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "createProxyWithNonce(address,bytes,uint256)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
     * @param _mastercopy Address of master copy.
     * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    createProxyWithCallback(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
     * @param _mastercopy Address of master copy.
     * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "createProxyWithCallback(address,bytes,uint256,address)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    calculateCreateProxyWithNonceAddress(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    ProxyCreation(proxy: null): TypedEventFilter<[string], { proxy: string }>;
  };

  estimateGas: {
    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param data Payload for message call sent to new proxy contract.
     * @param masterCopy Address of master copy.
     */
    createProxy(
      masterCopy: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param data Payload for message call sent to new proxy contract.
     * @param masterCopy Address of master copy.
     */
    "createProxy(address,bytes)"(
      masterCopy: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
     */
    proxyRuntimeCode(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
     */
    "proxyRuntimeCode()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
     */
    proxyCreationCode(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
     */
    "proxyCreationCode()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    createProxyWithNonce(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "createProxyWithNonce(address,bytes,uint256)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
     * @param _mastercopy Address of master copy.
     * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    createProxyWithCallback(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
     * @param _mastercopy Address of master copy.
     * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "createProxyWithCallback(address,bytes,uint256,address)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    calculateCreateProxyWithNonceAddress(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param data Payload for message call sent to new proxy contract.
     * @param masterCopy Address of master copy.
     */
    createProxy(
      masterCopy: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param data Payload for message call sent to new proxy contract.
     * @param masterCopy Address of master copy.
     */
    "createProxy(address,bytes)"(
      masterCopy: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
     */
    proxyRuntimeCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.
     */
    "proxyRuntimeCode()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
     */
    proxyCreationCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.
     */
    "proxyCreationCode()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    createProxyWithNonce(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to create new proxy contact and execute a message call to the new proxy within one transaction.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "createProxyWithNonce(address,bytes,uint256)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
     * @param _mastercopy Address of master copy.
     * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    createProxyWithCallback(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction
     * @param _mastercopy Address of master copy.
     * @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "createProxyWithCallback(address,bytes,uint256,address)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    calculateCreateProxyWithNonceAddress(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to get the address for a new proxy contact created via `createProxyWithNonce`      This method is only meant for address calculation purpose when you use an initializer that would revert,      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.
     * @param _mastercopy Address of master copy.
     * @param initializer Payload for message call sent to new proxy contract.
     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.
     */
    "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"(
      _mastercopy: string,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
